#!/bin/env bash
#
# Simultaneously tunnels to remote with 'sshuttle' and connects with 'mosh'.
#
# Run this script './rdev.sh' to simultaneously create an ssh tunnel to the
# remote dev server with 'sshuttle', and connect to that server using 'mosh'.
# (but note that )
#
# When the script disconnects, it automatically kills the sshuttle process
# running in the background.
#
# DO NOT EDIT: AUTOMAICALLY GENERATED BY ANSIBLE
#
# Ansible creates/updates this file automatically when run. It uses the IP
# address of the remote server and the values of 'rdev_mosh_port' or the value
# of 'rdev_ssh_port' (if defined) to populate the commands.
#
# When the host ip or mosh port changes, re-run the entire playbook or just
# the task that creates the script: 'ansible-playbook provision.yml -t script'.
#
# To modify the script edit 'templates/rdev.sh.j2'.

# On disconnecting from mosh/ssh run the 'cleanup' function.
trap cleanup EXIT

# Define initial variables.
REMOTE_USER=molecule
REMOTE_IP=172.17.0.3
REMOTE_MOSH_PORT=60033
REMOTE_SSH_PORT=22
PIDFILE="$HOME/.sshuttle--$(date +%s)"

# Start sshuttle 'vpn'.
sshuttle \
  --remote "$REMOTE_USER"@"$REMOTE_IP" \
  --auto-hosts \
  --daemon \
  --pidfile="$PIDFILE" \
  0/0

# Wait a bit to make sure the sshuttle process has gotten a good start.
sleep 2

# If the sshuttle process has started and created a pid file, connect via mosh
# or ssh to the remote server.
if [ -f "$PIDFILE" ]; then
  if command -v mosh >/dev/null; then
    echo "Connecting to remote via mosh..."
    sleep 2
    mosh "$REMOTE_USER"@"$REMOTE_IP" -p "$REMOTE_MOSH_PORT"
  else
    echo "Connecting to remote via ssh..."
    sleep 2
    ssh "$REMOTE_USER"@"$REMOTE_IP" -p "$REMOTE_SSH_PORT"
  fi
fi

# Kill the background sshuttle process (if it exists) and remove the pid file
# (if it exists), and then quit.
function cleanup {
  if [ -f "$PIDFILE" ]; then
    SSHUTTLE_PID=$(cat "$PIDFILE")

    echo ""
    echo "Ensuring background sshuttle process ($SSHUTTLE_PID) is terminated."
    echo ""

    rm "$PIDFILE"
    kill "$SSHUTTLE_PID"
  fi
}
