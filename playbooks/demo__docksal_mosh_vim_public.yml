---
- name: Provision docksal/mosh/sshuttle/vim scenario (converge).
  hosts: all

  collections:
    - ctorgalson.remote_dev

  tasks:
    # Set up bare system configuration and anything not depending on a non-root
    # user already being present.

    # Vars in group_vars/all/ansible-environment.yml.
    - name: Set environment variables.
      import_role:
        name: "ansible-environment"
      tags:
        - environment
        - systemwide

    # Vars in group_vars/all/ansible-timezone.yml.
    - name: Set system time zone.
      import_role:
        name: "ansible-timezone"
      tags:
        - timezone
        - systemwide

    # Vars in group_vars/all/ansible-role-unattended-upgrades.yml.
    - name: Configure unattended upgrades.
      import_role:
        name: "ansible-role-unattended-upgrades"
      tags:
        - packages
        - unattended-upgrades
        - systemwide

    # Vars in group_vars/all/ansible-role-clamav.yml.
    - name: Install, configure, and start clamav.
      import_role:
        name: "ansible-role-clamav"
      tags:
        - clamav
        - molecule-idempotence-notest
        - security
        - systemwide

    # Vars in group_vars/all/ansible-role-apt.yml.
    - name: Install required apt packages.
      import_role:
        name: "ansible-role-apt"
      tags:
        - apt
        # This role, ansible-role-unattended-upgrades, and geerlingguy.clamav
        # update the apt cache. This flunks Molecule's idempotence testing.
        - molecule-idempotence-notest
        - packages
        - systemwide

    # Vars in group_vars/all/ansible-role-pip.yml.
    - name: Install required pip packages.
      import_role:
        name: "ansible-role-pip"
      tags:
        - packages
        - pip
        - systemwide

    # Vars in group_vars/all/ansible-role-php.yml.
    - name: Set up php for composer/cli use.
      import_role:
        name: "ansible-role-php"
      tags:
        - composer
        - php
        - systemwide

    # Vars in group_vars/all/ansible-role-composer.yml.
    - name: Install composer.
      import_role:
        name: "ansible-role-composer"
      tags:
        - composer
        - packages
        - php
        - systemwide

    # Vars in group_vars/all/ansible-role-firewall.yml.
    - name: Set up system firewall.
      import_role:
        name: "ansible-role-firewall"
      tags:
        - security
        - systemwide

    # Set up users, tools that get installed in user directories, and tools
    # (like docker) that concern user groups.

    # Vars in group_vars/all/ansible-users.yml.
    - name: Set up required users.
      import_role:
        name: "ansible-users"
      tags:
        - users

    # Vars in group_vars/all/ansible-role-ssh-keys.yml.
    - name: Set up user ssh keys.
      import_role:
        name: "ansible-role-ssh-keys"
      tags:
        - keys
        - shell
        - users

    # Vars in group_vars/all/ansible-volume.yml.
    - name: Create and mount filesystem.
      import_role:
        name: "ansible-volume"
      tags:
        - users
        - volumes

    # Vars in group_vars/all/ansible-role-files.yml.
    - name: Set up file structure in user home directory.
      import_role:
        name: "ansible-role-files"
      tags:
        - files
        - shell
        - users

    # Vars in group_vars/all/ansible-role-oh-my-zsh.yml.
    - name: Set up zsh and oh-my-zsh for user.
      import_role:
        name: "ansible-role-oh-my-zsh"
      tags:
        - shell
        - users
        - zsh

    # Vars in group_vars/all/ansible-role-dotfiles.yml.
    - name: Set up dotfiles in user home directory.
      import_role:
        name: "ansible-role-dotfiles"
      tags:
        - dotfiles
        - shell
        - users

    # Vars in group_vars/all/ansible-role-vim.yml.
    - name: Set up Vim and its plugins.
      import_role:
        name: "ansible-role-vim"
      tags:
        - shell
        - users
        - vim

    # Vars in group_vars/all/ansible-role-nodejs.yml.
    - name: Install nodejs.
      import_role:
        name: "ansible-role-nodejs"
      tags:
        - node
        - npm

    # Vars in group_vars/all/ansible-yarn.yml.
    - name: Install Yarn.
      import_role:
        name: "ansible-yarn"
      tags:
        - npm
        - yarn

    # Vars in group_vars/all/ansible-role-nvm.yml.
    - name: Install nvm.
      import_role:
        name: "ansible-role-nvm"
      tags:
        - npm
        - nvm

    # Vars in group_vars/all/ansible-role-platform.yml.
    - name: Set up platformsh-cli tool.
      import_role:
        name: "ansible-role-platform"
      tags:
        - platform

    # Vars in group_vars/all/ansible-role-security.yml.
    - name: Set up basic system security.
      import_role:
        name: "ansible-role-security"
      tags:
        - security
        - users

    # Vars in group_vars/all/ansible-role-docker.yml.
    - name: Install and configure Docker.
      import_role:
        name: "ansible-role-docker"
      tags:
        - docker
        - docksal

    # Vars in group_vars/all/ansible-role-docksal.yml.
    - name: Install and configure Docksal.
      import_role:
        name: "ansible-role-docksal"
      tags:
        - docksal

    # Vars in group_vars/all/main.yml.
    - name: Write rdev.sh server connection script.
      template:
        src: "{{ rdev_con_script_src }}"
        dest: "{{ rdev_con_script_dest }}"
        mode: "a+x"
      delegate_to: localhost
      become: false
      tags:
        - localhost
        - script
      when: "rdev_con_script_dest is defined"

    # vars in group_vars/all/ansible-role-nerdfonts.yml.
    - name: Download individual NerdFonts to local system.
      import_role:
        name: "ansible-role-nerdfonts"
      delegate_to: localhost
      become: false
      tags:
        - localhost
        - fonts
